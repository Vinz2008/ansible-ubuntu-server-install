services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 9943:9943
      - 9003:8000
      - 9000:9000

  dashdot:
    image: mauricenino/dashdot
    container_name: dashdot
    restart: unless-stopped
    ports:
      - 8002:3001
    privileged: true
    volumes:
      - /:/mnt/host:ro
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    restart: unless-stopped
    ports:
      - '7575:7575'
    volumes:
      - /home/vincent/homarr/configs:/app/data/configs
      - /home/vincent/homarr/data:/data
      - /home/vincent/homarr/icons:/app/public/icons
      - /var/run/docker.sock:/var/run/docker.sock 
  jackett:
    image : linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - AUTO_UPDATE=true #optional
    volumes:
      - /home/vincent/jackett/config:/config
      - "{{ share_root }}/downloads:/downloads"
    ports:
      - 9117:9117
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    ports:
      - 8191:8191
#   suwayomi:
#     container_name: suwayomi
#     image: ghcr.io/suwayomi/tachidesk:latest
#     environment:
#       - PUID=1000
#       - PGID=1000
#       - TZ=Europe/Paris 
#       - FLARESOLVERR_ENABLED=true
#       - FLARESOLVERR_URL=http://192.168.1.3:8191
# #    example for setting env vars:
# #
# #      - BIND_IP=0.0.0.0
# #      - BIND_PORT=4567
# #      - SOCKS_PROXY_ENABLED=false
# #      - DOWNLOAD_AS_CBZ=true
# #      - BASIC_AUTH_ENABLED=true
# #      - BASIC_AUTH_USERNAME=manga
# #      - BASIC_AUTH_PASSWORD=hello123
#     volumes:
#       - /home/vincent/Tachidesk/data:/home/suwayomi/.local/share/Tachidesk
#     ports:
#       - "4567:4567"
#     restart: on-failure
  # teemii-frontend:
  #   container_name: teemii-frontend
  #   image: dokkaner/teemii-frontend:latest
  #   ports:
  #     - "8080:80"
  #   networks:
  #     - teemii-network
  #   environment:
  #     - VITE_APP_TITLE=Teemii
  #     - VITE_APP_PORT=80

  # teemii-backend:
  #   container_name: teemii-backend
  #   image: dokkaner/teemii-backend:latest
  #   volumes:
  #     - /home/vincent/teemii/data:/data
  #   networks:
  #     - teemii-network
  #   environment:
  #     - EXPRESS_PORT=3000
  #     - SOCKET_IO_PORT=1555

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=debug
      - TZ=Europe/Paris
    ports:
      - 5055:5055
    volumes:
      - /home/vincent/jellyseer/config:/app/config
  kavita:
    image: jvmilazz0/kavita:latest
    container_name: kavita
    restart: unless-stopped
    volumes:
      - "{{ share_root }}/books:/books"
      - /home/vincent/kavita/data:/kavita/config
    environment:
      - TZ=Europe/Paris
    ports:
      - 5000:5000
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /home/vincent/radarr/config:/config
      - "{{ share_root }}/films:/movies" #optional
      - "{{ share_root }}/downloads:/downloads" #optional
    ports:
      - 7878:7878
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_ADDON=sonarr-darker
    volumes:
      - /home/vincent/sonarr/config:/config
      - "{{ share_root }}/series:/tv" #optional
      - "{{ share_root }}/downloads:/downloads" #optional
    ports:
      - 8989:8989
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /home/vincent/bazarr/config:/config
      - "{{ share_root }}/films:/movies" #optional
      - "{{ share_root }}/series:/tv" #optional
    ports:
      - 6767:6767
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /home/vincent/prowlarr/config:/config
    ports:
      - 9696:9696
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /home/vincent/readarr/config:/config
      - "{{ share_root }}/books:/books" #optional
      - "{{ share_root }}/downloads:/downloads"
    ports: 
      - 8787:8787

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - USER=transmission #optional
      - "PASS={{ password }}" #optional
    volumes:
      - /home/vincent/transmission/config:/config
      - "{{ share_root }}/downloads:/downloads"
      - /home/vincent/transmission/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - PASSWORD={{ password }}
      - SUDO_PASSWORD={{ password }}
    volumes:
      - /home/vincent/code-server/config:/config
      - /home/vincent/code-server/projects:/projects
    ports:
      - 8443:8443
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare
    restart: unless-stopped
    environment:
      - API_KEY={{ cloudflare_token }}
      - ZONE=vincent-nas.fr
#      - SUBDOMAIN=subdomain
      - PROXIED=false
  #cloudflare-ddns-jellyfin:
  #  image: oznu/cloudflare-ddns:latest
  #  container_name: cloudflare-jellyfin
  #  restart: unless-stopped
  #  environment:
  #    - API_KEY={{ cloudflare_token }}
  #    - ZONE=vincent-nas.fr
  #    - SUBDOMAIN=jellyfin
  #    - PROXIED=false
#  caddy:
#    image: caddy:latest
#    container_name: caddy
#    restart: unless-stopped
#    ports:
#      - "80:80"
#      - "443:443"
#      - "443:443/udp"
#    volumes:
#      - /home/vincent/caddy/config:/config
#      - /home/vincent/caddy/data:/data
#      - /home/vincent/caddy/caddyfile/Caddyfile:/etc/caddy/Caddyfile
  nginx_proxy:
    container_name: nginx_proxy
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - /home/vincent/nginx-proxy/data:/data
      - /home/vincent/nginx-proxy/letsencrypt:/etc/letsencrypt
      - /home/vincent/nginx-proxy/98-themepark:/etc/cont-init.d/98-themepark
    environment:
      - TP_THEME=organizr

  mariadb_nextcloud:
    image: "mariadb:latest"
    restart: unless-stopped
    container_name: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - mariadb_nextcloud_data:/var/lib/mysql
    environment:
      - "MYSQL_ROOT_PASSWORD={{ password }}"
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - "MYSQL_PASSWORD={{ password }}"
  redis_nextcloud:
    image: redis
    restart: always
    container_name: redis_nextcloud
    command: "redis-server --requirepass {{ password }}"
  gitea:
    image: "gitea/gitea"
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: unless-stopped
    volumes:
      - "{{ share_root }}/gitea:/data"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "222:22"
  gitea-runner:
    image: gitea/act_runner:nightly
    container_name: gitea-runner
    environment:
      - CONFIG_FILE=/config.yaml
      - GITEA_INSTANCE_URL=http://192.168.1.3:3000
      - "GITEA_RUNNER_REGISTRATION_TOKEN={{ gitea_runner_registration_token }}"
      - "GITEA_RUNNER_NAME=runner-local"
    volumes:
      - /home/vincent/gitea-runner/config.yaml:/config.yaml
      - /home/vincent/gitea-runner/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
  mirror-to-gitea:
    image: jaedle/mirror-to-gitea:latest
    restart: unless-stopped
    environment:
      - GITHUB_USERNAME=Vinz2008
      - GITEA_URL=http://192.168.1.3:3000
      - "GITEA_TOKEN={{gitea_token}}"
      #- GITHUB_TOKEN=please-exchange-with-token # Optional, set to mirror private repos
      #- MIRROR_PRIVATE_REPOSITORIES=true # Optional, set to mirror private repos
      # - DELAY=3600 # Optional, set to change the delay between checks (in seconds)
    container_name: mirror-to-gitea
  nextcloud:
    image: "nextcloud:latest"
    container_name: nextcloud
    restart: unless-stopped
    ports:
      - 8084:80
      - 8085:443
    links:
      - mariadb_nextcloud:mariadb
      - redis_nextcloud:redis
    volumes:
      - /home/vincent/nextcloud/config:/var/www/html/config
      - nextcloud_data:/var/www/html
#      - "{{ files_root }}:/var/www/html/data"
      - /home/vincent/nextcloud/data:/var/www/html/data
      - "{{ share_root }}:/share_root"
    environment:
      - "MYSQL_PASSWORD={{ password }}"
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=mariadb
      # - REDIS_HOST=redis
      # - "REDIS_HOST_PASSWORD={{ password }}"


  papermc:
    image: marctv/minecraft-papermc-server:latest
    container_name: mcserver
    restart: unless-stopped
    environment:
      - MEMORYSIZE=2G
    volumes:
      - /home/vincent/mcserver:/data:rw
    ports:
      - 25565:25565

  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    environment:
      - PUID=1000 #optional
      - PGID=1000 #optional
      - TZ=Europe/London
      - SUBDOMAINS={{ duckdns_domain}}
      - TOKEN={{ duckdns_token }}
      - LOG_FILE=false #optional
    volumes:
      - /home/vincent/duckdns/config:/config #optional
    restart: unless-stopped

  onlyoffice-documentserver:
    image: onlyoffice/documentserver
    container_name: onlyoffice-documentserver
    depends_on:
      - onlyoffice-postgresql
#      - onlyoffice-rabbitmq
    environment:
      - DB_TYPE=postgres
      - DB_HOST=onlyoffice-postgresql
      - DB_PORT=5432
      - DB_NAME=onlyoffice
      - DB_USER=onlyoffice
#      - AMQP_URI=amqp://guest:guest@onlyoffice-rabbitmq
      # Uncomment strings below to enable the JSON Web Token validation.
      - JWT_ENABLED=true
      - JWT_SECRET={{ password }}
      - JWT_HEADER=Authorization
      - JWT_IN_BODY=true
    ports:
      - '8086:80'
    stdin_open: true
    restart: unless-stopped
    stop_grace_period: 60s
    volumes:
       - /home/vincent/onlyoffice/data:/var/www/onlyoffice/Data
       - /home/vincent/onlyoffice/logs:/var/log/onlyoffice
       - /home/vincent/onlyoffice/cache_files:/var/lib/onlyoffice/documentserver/App_Data/cache/files
       - /home/vincent/onlyoffice/example_files:/var/www/onlyoffice/documentserver-example/public/files
       - /home/vincent/onlyoffice/fonts:/usr/share/fonts
       
  # onlyoffice-rabbitmq:
  #   container_name: onlyoffice-rabbitmq
  #   image: rabbitmq
  #   restart: always
  #   expose:
  #     - '5672'

  onlyoffice-postgresql:
    container_name: onlyoffice-postgresql
    image: postgres:9.5
    environment:
      - POSTGRES_DB=onlyoffice
      - POSTGRES_USER=onlyoffice
      - POSTGRES_HOST_AUTH_METHOD=trust
    restart: always
    expose:
      - '5432'
    volumes:
      - postgresql_data:/var/lib/postgresql

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /home/vincent/immich/not_used_upload_folder:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - "{{ share_root }}/pictures:/share_pictures"
    environment:
      - TZ=Europe/Paris
      - DB_PASSWORD=postgres
      - DB_USERNAME=postgres
      - DB_DATABASE_NAME=immich
      - REDIS_HOSTNAME=immich-redis
      - DB_HOSTNAME=immich-database
    ports:
      - 2283:2283
    depends_on:
      - immich-redis
      - immich-database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:release
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - immich-model-cache:/cache
    environment:
      - MACHINE_LEARNING_PRELOAD__CLIP=XLM-Roberta-Large-Vit-B-32
    restart: always

  immich-redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  immich-database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: immich
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - /home/vincent/immich/db:/var/lib/postgresql/data
    # healthcheck:
    #   test: pg_isready --dbname='immich' || exit 1; Chksum="$$(psql --dbname='immich' --username='postgres' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
    #   interval: 5m
    #   start_interval: 30s
    #   start_period: 5m
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: always

  bitwarden-backup:
    image: ghcr.io/quadrubo/bitwarden-backup:v0.1.0
    container_name: bitwarden-backup
    environment:
      # Paths
      - BACKUP_PATH=/backup
      - BW_BINARY=/usr/local/bin/bw
      # Authentication
      - "BW_CLIENT_ID={{ bitwarden_client_id }}"
      - "BW_CLIENT_SECRET={{ bitwarden_client_secret }}"
      - "BW_MASTER_PASSWORD={{ bitwarden_master_password }}"
      # Connection
      - BW_SERVER=https://vault.bitwarden.com
      # Backups
      - BACKUP_FORMAT=encrypted_json
      - "BACKUP_PASSWORD={{ bitwarden_master_password }}"
      # Cron
      - CRON_SCHEDULE=0 1 * * *
      # Time
      - TZ=Europe/Paris
    volumes:
      - "{{ share_root }}/files/vincent/backup/bitwarden/:/backup"
  windows-vm:
    image: dockurr/windows
    container_name: windows
    devices:
      - /dev/kvm
    cap_add:
      - NET_ADMIN
    ports:
      - 8006:8006
      - 3389:3389/tcp
      - 3389:3389/udp
    volumes:
      - "{{ share_root }}/vm/windows:/storage"
      -  "{{ share_root }}/vm/install/windows/oem:/oem"
    stop_grace_period: 2m
    restart: on-failure
    environment:
      VERSION: "win10"
      LANGUAGE: "French"
      REGION: "fr-FR"
      KEYBOARD: "fr-FR"
      RAM_CHECK: "N"
      RAM_SIZE: "8G"
      CPU_CORES: "4"
    profiles:
      - donotstart

  macos-vm:
    image: dockurr/macos
    container_name: macos
    environment:
      VERSION: "ventura"
      RAM_SIZE: "8G"
      CPU_CORES: "4"
    devices:
      - /dev/kvm
    cap_add:
      - NET_ADMIN
    ports:
      - 8007:8006
      - 5900:5900/tcp
      - 5900:5900/udp
    volumes:
      - "{{ share_root }}/vm/macos:/storage"
    stop_grace_period: 2m
    profiles:
      - donotstart
    
  netdata:
    image: netdata/netdata
    container_name: netdata
    ports:
      - '19999:19999'
    pid: host
    #network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /run/dbus:/run/dbus:ro


  scrutiny:
    image: ghcr.io/analogj/scrutiny:master-omnibus
    container_name: scrutiny
    restart: unless-stopped
    cap_add:
      - SYS_RAWIO
    ports:
      - "8087:8080" # webapp
      - "8088:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - /home/vincent/scrutiny/config:/opt/scrutiny/config
      - /home/vincent/scrutiny/influxdb:/opt/scrutiny/influxdb
    devices:
    # disks of share
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
      - "/dev/sdf"

  pumpkin: # minecraft server, replace papermc with it in the future (TODO)
    build: ./pumpkin
    container_name: pumpkin
    restart: unless-stopped
    ports:
      - "25566:25565"
    volumes:
      - /home/vincent/pumpkin/world:/pumpkin/world

volumes:
  portainer_data:
  mariadb_nextcloud_data:
  nextcloud_data:
  postgresql_data:
  netdataconfig:
  netdatalib:
  netdatacache:
  immich-model-cache:

# networks:
#   teemii-network:
#     driver: bridge
